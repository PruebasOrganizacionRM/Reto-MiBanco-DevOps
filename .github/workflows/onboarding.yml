name: OnBoarding Usuarios
run-name: ¬°Estoy ejecutando pruebas de onboarding!
on:
  workflow_dispatch:
    inputs:
      username:
        description: "GitHub username a invitar (sin @)"
        required: true
        type: string
      org:
        description: "Nombre de la organizaci√≥n"
        required: true
        type: string
      team:
        description: "Nombre del team en la organizaci√≥n"
        required: true
        type: string
      repo:
        description: "Repositorio destino para asignar permisos (nombre)"
        required: true
        type: string
      permission:
        description: "Permiso en repo: pull, triage, push, maintain, admin"
        required: true
        default: "push"
        type: string

jobs:
  onboarding:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
      issues: write
    steps:
     - name: Auth gh con token
       env:
          GH_TOKEN1: ${{ secrets.GH_TOKEN }}
       run: |
          echo "$GH_TOKEN1" | gh auth login --with-token
         
     - name: Invitar usuario a la organizaci√≥n (si no es miembro)
       env:
          ORG: ${{ inputs.org }}
       run: |
          USER="${{ inputs.username }}"
          # Invitar por nombre de usuario (si no pertenece ya)
          MEMBERSHIP=$(gh api /orgs/$ORG/members/$USER -q . >/dev/null 2>&1 || echo "not_member")
          if [ "$MEMBERSHIP" = "not_member" ]; then
            echo "Invitando $USER a $ORG"
            
            INVITEE_ID=$(gh api users/$USER | jq -r '.id')
            gh api --method POST /orgs/$ORG/invitations \
            --input - <<< "{\"invitee_id\": $INVITEE_ID, \"role\": \"direct_member\"}" || true
           
          else
            echo "$USER ya es miembro o no se pudo comprobar membership; continuamos"
          fi
          
     - name: Agregar usuario al equipo
       env:
          ORG: ${{ inputs.org }}
          USER: ${{ inputs.username }}
          TEAM_INPUT: ${{ inputs.team }}
       run: |       
          TEAM_SLUG=$(gh api /orgs/$ORG/teams --paginate \
          --jq ".[] | select(.slug==\"$TEAM_INPUT\" or .name==\"$TEAM_INPUT\") | .slug")
          
          echo "üìå Slug del equipo encontrado: $TEAM_SLUG"
          
          if [ -z "$TEAM_SLUG" ]; then
            echo "‚ùå ERROR: El equipo '$TEAM_INPUT' no existe en la organizaci√≥n '$ORG'."
            echo "‚ÑπÔ∏è  Equipos disponibles:"
            gh api /orgs/$ORG/teams --jq '.[].slug'
            exit 1
          fi
          echo "üë§ Agregando usuario @$USER al equipo $TEAM_SLUG..."
          
          # 3. Esperar hasta que el usuario acepte la invitaci√≥n
          echo "‚è≥ Verificando si $USER ya acept√≥ la invitaci√≥n..."
          for i in {1..10}; do
            STATUS=$(gh api /orgs/$ORG/members/$USER -q . >/dev/null 2>&1 && echo "accepted" || echo "pending")
            if [ "$STATUS" = "accepted" ]; then
              echo "‚úÖ $USER ya es miembro confirmado"
            break
            fi
            echo "‚åõ Invitaci√≥n a√∫n pendiente, esperando 30s..."
            sleep 30
          done

          if [ "$STATUS" != "accepted" ]; then
            echo "‚ö†Ô∏è El usuario $USER a√∫n no acept√≥ la invitaci√≥n. No se puede agregar al equipo."
            exit 0
          fi
          
          # 4. Agregar al equipo
          echo "üë• Agregando $USER al equipo $TEAM_NAME ($TEAM_SLUG)"
          gh api --method PUT /orgs/$ORG/teams/$TEAM_SLUG/memberships/$USER -f role=member
          echo "üéâ $USER agregado correctamente al equipo"

     - name: Asignar permisos en repositorio
       env:
          ORG: ${{ inputs.org }}
          TEAM_INPUT: ${{ inputs.team }}
          REPO: ${{ inputs.repo }}
          PERMISSION: ${{ inputs.permission }}
       run: |
         set -euo pipefail

          echo "üîé Validando repo '$REPO' en la organizaci√≥n '$ORG'..."

          # Validar repo
          if ! gh api "/repos/$ORG/$REPO" >/dev/null 2>&1; then
            echo "‚ùå ERROR: El repositorio '$REPO' no existe en la organizaci√≥n '$ORG'."
            echo "‚ÑπÔ∏è  Repos disponibles:"
            gh api "/orgs/$ORG/repos" --paginate --jq '.[].name'
            exit 1
          fi
          echo "üìå Repositorio encontrado: $REPO"

          # Buscar slug del equipo
          TEAM_SLUG=$(gh api "/orgs/$ORG/teams" --paginate \
            --jq ".[] | select(.slug==\"$TEAM_INPUT\" or .name==\"$TEAM_INPUT\") | .slug")

          if [ -z "$TEAM_SLUG" ]; then
            echo "‚ùå ERROR: El equipo '$TEAM_INPUT' no existe en la organizaci√≥n '$ORG'."
            echo "‚ÑπÔ∏è  Equipos disponibles:"
            gh api "/orgs/$ORG/teams" --jq '.[].slug'
            exit 1
          fi
          echo "üìå Equipo encontrado: $TEAM_SLUG"

          # Asignar permisos
          echo "üîë Asignando permiso '$PERMISSION' al equipo '$TEAM_SLUG' en el repo '$REPO'..."
          gh api --method PUT "/orgs/$ORG/teams/$TEAM_SLUG/repos/$ORG/$REPO" -f permission=$PERMISSION
          echo "‚úÖ Permiso '$PERMISSION' asignado exitosamente."
 
     - name: Crear issue de bienvenida
       env:
          ORG: ${{ inputs.org }}
       run: |
          gh issue create --repo $ORG/${{ inputs.repo }} --title "üéâ Bienvenido @${{ inputs.username }}!" \
            --body "Hola @${{ inputs.username }}\n\n Bienvenido a **${{ inputs.team }}**. Aqu√≠ tienes:\n- Repo: ${{ inputs.repo }}\n- Permiso: ${{ inputs.permission }}\n\n Si necesitas acceso adicional, abre un ticket." || true
          
          
     
     
      
